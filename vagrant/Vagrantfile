# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "hashicorp/bionic64"
  config.vm.box_version = "1.0.282"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"


  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.99.20"

  # private network could be required to enbale master-node communication,


  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.

    config.vm.define "master" do |master|
      master.vm.network "public_network",
        use_dhcp_assigned_default_route: true ,
        ip: "192.168.0.20",
        bridge: "wlp8s0"
      master.vm.hostname="master"
      master.vm.synced_folder "/mnt/vmount/data/master", "/vagrant_data"
# Provider-specific configuration so you can fine-tune various
# backing providers for Vagrant. These expose provider-specific options.
      for i in 30000..32767
          master.vm.network :forwarded_port, guest: i, host: i
      end
      master.vm.network "forwarded_port", guest: 6443, host: 6443

      master.vm.provider "virtualbox" do |mvb|
         mvb.memory = "4096"
         mvb.cpus = "3"
      end

     end

     config.vm.define "worker" do |worker|
       ## custom properties
       worker.vm.network "public_network",
         use_dhcp_assigned_default_route: true ,
         ip: "192.168.0.21",
         bridge: "wlp8s0"
       worker.vm.hostname="worker"
       worker.vm.synced_folder "/mnt/vmount/data/worker", "/vagrant_data"
       worker.vm.network "forwarded_port", guest: 10250, host: 10250
       ## exporting all node port, while its not mandatory
       ## components like service mesh & ingress conmtroller use external
       ## load balancers, as we wont have this option nodeport is a alternate
       for i in 30000..32767
           worker.vm.network :forwarded_port, guest: i, host: i
       end

       worker.vm.provider "virtualbox" do |wvb|
          wvb.memory = "4096"
          wvb.cpus = "3"
       end
     end


  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.


  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
      sed -i '/swap/d' /etc/fstab
      sudo swapoff -a
  SHELL
end
